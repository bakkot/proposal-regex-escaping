<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: RegExp.escape
stage: 2
contributors: Jordan Harband
</pre>

<emu-clause id="sec-text-processing" number="22">
  <h1>Text Processing</h1>

  <emu-clause id="sec-regexp-regular-expression-objects" number="2">
    <h1>RegExp (Regular Expression) Objects</h1>

    <emu-clause id="sec-properties-of-the-regexp-constructor" number="5">
      <h1>Properties of the RegExp Constructor</h1>

      <ins>
      <emu-clause id="sec-regexp.escape" number="2">
        <h1>RegExp.escape ( _S_ )</h1>
        <p>This method takes a string and returns a similar string in which each character that is potentially special in a regular expression |Pattern| has been replaced by an escape sequence representing that character.</p>
        <p>It performs the following steps when called:</p>

        <emu-alg>
          1. If _S_ is not a String, throw a TypeError exception.
          1. Let _cpList_ be StringToCodePoints(_S_).
          1. Let _escapedList_ be a new empty List.
          1. For each code point _c_ in _cpList_, do
            1. If _escapedList_ is empty and _c_ is matched by |DecimalDigit|, then
              1. Append the code point U+005C (REVERSE SOLIDUS) to _escapedList_.
              1. Append the code point U+0078 (LATIN SMALL LETTER X) to _escapedList_.
              1. Append the code point U+0033 (DIGIT THREE) to _escapedList_.
              1. Append _c_ to _escapedList_.
            1. Else,
              1. Append the code points in EncodeForRegExpEscape(_c_) to _escapedList_.
          1. Return CodePointsToString(_escapedList_).
        </emu-alg>

        <emu-note>
          <p>Despite having similar names, EscapeRegExpPattern and `RegExp.escape` do not perform similar actions. The former escapes a pattern for representation as a string, while this function escapes a string for representation inside a pattern.</p>
        </emu-note>
      </emu-clause>

      <emu-clause id="sec-encode" type="abstract operation">
        <h1>
          EncodeForRegExpEscape (
            _c_: a code point,
          ): a List of code points
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>If _c_ represents a RegExp punctuator that needs escaping, or ASCII whitespace, it produces the code points for *"\x"* followed by the relevant escape code. If _c_ represents non-ASCII white space, it produces the code points for *"\u"* followed by the relevant escape code. Otherwise, it returns a List containing _c_.</dd>
        </dl>

        <emu-alg>
          1. Let _codePoints_ be a new empty List.
          1. Let _punctuators_ be the string-concatenation of *"(){}[]|,.?\*+-^$=<>/#&!%:;@~'`"*, the code unit 0x0022 (QUOTATION MARK), and the code unit 0x005C (REVERSE SOLIDUS).
          1. Let _toEscape_ be StringToCodePoints(_punctuators_).
          1. If _toEscape_ contains _c_ or _c_ is matched by |WhiteSpace|, then
            1. If _c_ ‚â§ 0xFF, then
              1. Append the code point U+005C (REVERSE SOLIDUS) to _codePoints_.
              1. Append the code point U+0078 (LATIN SMALL LETTER X) to _codePoints_.
              1. Let _hex_ be Number::toString(ùîΩ(_c_), 16).
              1. Set _hex_ to StringPad(_hex_, 2, *"0"*, ~start~).
              1. Append the code points in StringToCodePoints(_hex_) to _codePoints_.
            1. Let _codeUnits_ be UTF16EncodeCodePoint(_c_).
            1. For each code unit _cu_ of _codeUnits_, do
              1. Let _escape_ be UnicodeEscape(_cu_).
              1. Append the code points in StringToCodePoints(_escape_) to _codePoints_.
          1. Else,
            1. Append _c_ to _codePoints_.
          1. Return _codePoints_.
        </emu-alg>
      </emu-clause>
      </ins>
    </emu-clause>
  </emu-clause>
</emu-clause>
