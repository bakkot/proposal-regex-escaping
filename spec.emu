<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: RegExp.escape
stage: 2
contributors: Jordan Harband
</pre>

<emu-clause id="sec-text-processing" number="22">
  <h1>Text Processing</h1>

  <emu-clause id="sec-regexp-regular-expression-objects" number="2">
    <h1>RegExp (Regular Expression) Objects</h1>

    <emu-clause id="sec-patterns" number="1">
      <h1>Patterns</h1>

      <h2>Syntax</h2>
      <p>Each `\\u` |HexTrailSurrogate| for which the choice of associated `u` |HexLeadSurrogate| is ambiguous shall be associated with the nearest possible `u` |HexLeadSurrogate| that would otherwise have no corresponding `\\u` |HexTrailSurrogate|.</p>
      <emu-grammar type="definition">
        HexNonSurrogate ::
          Hex4Digits [> but only if the MV of |Hex4Digits| is not in the inclusive interval from 0xD800 to 0xDFFF]

        IdentityEscape[UnicodeMode] ::
          [+UnicodeMode] SyntaxCharacter
          [+UnicodeMode] `/` <ins>`,` `-` `=` `<` `>` `/` `#` `&` `!` `%` `:` `;` `@` `~` `'` `"`</ins>
          <ins>[+UnicodeMode] WhiteSpace</ins>
          [~UnicodeMode] SourceCharacter but not UnicodeIDContinue

        DecimalEscape ::
          NonZeroDigit DecimalDigits[~Sep]? [lookahead &notin; DecimalDigit]
      </emu-grammar>
    </emu-clause>

    <emu-clause id="sec-properties-of-the-regexp-constructor" number="5">
      <h1>Properties of the RegExp Constructor</h1>

      <ins>
      <emu-clause id="sec-regexp.escape" number="2">
        <h1>RegExp.escape ( _S_ )</h1>
        <p>This method takes a string and returns a version of it with all control characters escaped. It escapes characters that would otherwise be treated by the regular expressions engine as special meta characters using an escape sequence character.</p>
        <p>It performs the following steps when called:</p>
        <p>
          The phrase "<dfn id="the ASCII punctuators that need escaping">the ASCII punctuators that need escaping</dfn>"
          denotes the following String, which consists of every ASCII punctuator except U+005F (LOW LINE):
          *"(){}[]|,.?\*+-^$=<>\/#&!%:;@~'"`"*.
        </p>

        <emu-alg>
          1. Let _str_ be ? ToString(_S_).
          1. Let _cpList_ be StringToCodePoints(_str_).
          1. Let _toEscape_ be StringToCodePoints(the ASCII punctuators that need escaping).
          1. Let _escapedList_ be a new empty List.
          1. For each code point _c_ in _cpList_, do
            1. If _escapedList_ is empty and _c_ is matched by |DecimalDigit|, then
              1. Append code unit U+005C (REVERSE SOLIDUS) to _escapedList_.
              1. Append code unit U+0078 (LATIN SMALL LETTER X) to _escapedList_.
              1. Append code unit U+0033 (DIGIT THREE) to _escapedList_.
            1. Else if _toEscape_ contains _c_ or _c_ is matched by |WhiteSpace|, then
              1. Append code unit U+005C (REVERSE SOLIDUS) to _escapedList_.
            1. Append _c_ to _escapedList_.
          1. Return CodePointsToString(_escapedList_).
        </emu-alg>

        <emu-note>
          <p>`escape` takes a string and escapes it so it can be literally represented as a pattern. In contrast EscapeRegExpPattern (as the name implies) takes a pattern and escapes it so that it can be represented as a string. While the two are related, they do not share the same character escape set or perform similar actions.</p>
        </emu-note>
      </emu-clause>
      </ins>
    </emu-clause>
  </emu-clause>
</emu-clause>
